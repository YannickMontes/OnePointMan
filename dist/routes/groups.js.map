{"version":3,"sources":["../../routes/groups.js"],"names":["express","require","router","Router","db","squelb","squel","useFlavour","sender","get","req","res","iduser","params","groups","getUsersInGroups","any","then","tableau","toReturn","buildGroupsObject","send","status","message","catch","e","toString","console","log","idgroupe","groupData","listeMembres","getUserDataFromGroup","result","forEach","groupMember","nom","prenom","member","push","sendResponse","SUCCESS_STATUS","BAD_REQUEST","idGroup","query","select","from","field","where","left_join","getGroups","queryResult","element","index","contains","idPosition","idgroup","grelement","issharing","sharesposition","istracking","nomgroup","membres","idGroupeConcerne","grindex","nomuser","parseInt","requete","getGroupPinpoints","JSONToReturn","pinpoints","userpositions","trackings","currentTime","Date","diff","daterdv","dontPush","pinpoint","idpinpoint","idcreator","nomcreator","prenomcreator","pinlt","pinlg","description","getUsersPositions","currentDate","userCorrectRequest","isCurrent","dateposition","compareTimes","userposition","userlt","userglt","userlg","userglg","msg","current","getTrackings","tracking","buildTrackingArray","err","error","order","array","containsIdUser","indexInReturn","newEl","lt","lg","lastLocationTime","difference","getDrawings","drawings","objectToPush","iddrawing","zoom","nelt","nelg","swlt","swlg","img","actif","post","toCreate","body","groupname","insert","replaceSingleQuotes","singleQuoteReplacement","into","set","toISOString","returning","one","row","inUserGroup","none","response","toChange","newgroupname","update","table","module","exports"],"mappings":"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","file":"groups.js","sourcesContent":["const express = require('express');\r\nconst router = express.Router();\r\nconst db = require('../connection');\r\nconst squelb = require('squel');\r\nconst squel = squelb.useFlavour('postgres');\r\n\r\nconst sender = require('../sender');\r\n\r\n//donne les groupes auxquels appartient un utilisateur + les membres du groupe\r\nrouter.get('/:iduser/', function (req, res) {\r\n    let iduser = req.params.iduser;\r\n    let groups = getUsersInGroups(iduser);\r\n    db.any(groups)\r\n        .then((tableau) => {\r\n            let toReturn = buildGroupsObject(tableau);\r\n            res.send({\r\n                status: 'success',\r\n                message: toReturn\r\n            });\r\n            //sender.sendResponse(sender.SUCCESS_STATUS, toReturn, res);\r\n\r\n        })\r\n        .catch(e => {\r\n            res.status(400);\r\n            res.send({\r\n                status: 'fail',\r\n                message: e.toString()\r\n            });\r\n            //sender.sendResponse(sender.BAD_REQUEST, toReturn, res);\r\n        });\r\n\r\n});\r\n\r\nrouter.get('/getGroupInfo/:idgroupe', function (req, res) {\r\n    console.log('GET getGroupInfo/idgroupe');\r\n\r\n    let idgroupe = req.params.idgroupe;\r\n    let groupData = {\r\n        listeMembres: []\r\n    };\r\n\r\n    getUserDataFromGroup(idgroupe)\r\n        .then(result => {\r\n\r\n            result.forEach(member => {\r\n                let groupMember = {\r\n                    nom: '',\r\n                    prenom: '',\r\n                    iduser: ''\r\n                };\r\n\r\n                groupMember.nom = member.nom;\r\n                groupMember.prenom = member.prenom;\r\n                groupMember.iduser = member.iduser;\r\n\r\n                groupData.listeMembres.push(groupMember);\r\n            });\r\n\r\n            sender.sendResponse(sender.SUCCESS_STATUS, groupData, res)\r\n        })\r\n        .catch(e => {\r\n            console.log(e);\r\n            sender.sendResponse(sender.BAD_REQUEST, e.toString(), res)\r\n        });\r\n\r\n    console.log('END GET getGroupInfo/idgroupe');\r\n});\r\n\r\nconst getUserDataFromGroup = (idGroup) => {\r\n    return db.query(squel.select()\r\n        .from('\"USER_GROUP\"', 'ug')\r\n        .field('nom')\r\n        .field('prenom')\r\n        .field('u.iduser')\r\n        .where('idgroup = ? ', idGroup)\r\n        .left_join('\"USER\"', 'u', 'u.iduser = ug.iduser')\r\n        .toString())\r\n};\r\n\r\nlet getGroups = (iduser) =>\r\n    squel.select()\r\n        .from('public.\"USER_GROUP\"', 'ugr')\r\n        .field('ugr.idgroup')\r\n        .field('gr.nom')\r\n        .field('ugr.sharesposition')\r\n        .field('ugr.istracking')\r\n        .where('ugr.iduser = ?', iduser)\r\n        .left_join('public.\"GROUP\"', 'gr', 'ugr.idgroup = gr.idgroup')\r\n;\r\n\r\nlet getUsersInGroups = (iduser) =>\r\n    squel.select()\r\n        .from(getGroups(iduser), 'listgroups')\r\n        .left_join('public.\"USER_GROUP\"', 'ugr', 'ugr.idgroup = listgroups.idgroup')\r\n        .left_join('public.\"USER\"', 'usr', 'usr.iduser = ugr.iduser')\r\n        .field('listgroups.sharesposition')\r\n        .field('listgroups.istracking')\r\n        .field('usr.prenom')\r\n        .field('usr.nom', 'nomuser')\r\n        .field('usr.iduser')\r\n        .field('listgroups.nom', 'nomgroup')\r\n        .field('ugr.idgroup')\r\n        .toString();\r\n\r\nfunction buildGroupsObject(queryResult) {\r\n    var groups = [];\r\n    queryResult.forEach((element, index) => {\r\n        // le resultat de la requete donne un tableau de {prenom, nomuser, iduser, nomgroup, idgroup}\r\n        let contains = false;\r\n        let idPosition;\r\n        // si l'id du groupe n'existe pas encore dans le tableau, on le push et on crée un ligne pour le groupe\r\n        groups.forEach(grelement => {\r\n            if (element.idgroup === grelement.idgroup) {\r\n                contains = true;\r\n                idPosition = index;\r\n            }\r\n\r\n        });\r\n        if (!contains) {\r\n            groups.push({\r\n                idgroup: element.idgroup,\r\n                issharing: element.sharesposition,\r\n                istracking: element.istracking,\r\n                nomgroup: element.nomgroup,\r\n                membres: []\r\n            })\r\n        }\r\n    });\r\n    //une fois le tableau des groupes créé, on push les membres dans groups[idGroupConcerné].membres\r\n    queryResult.forEach((element) => {\r\n        let idGroupeConcerne;\r\n        //on get la position dans groups du groupe concerné pour l'user (element)\r\n        groups.forEach((grelement, grindex) => {\r\n            if (grelement.idgroup === element.idgroup) {\r\n                idGroupeConcerne = grindex;\r\n                groups[idGroupeConcerne].membres.push({\r\n                    iduser: element.iduser,\r\n                    prenom: element.prenom,\r\n                    nomuser: element.nomuser\r\n                });\r\n            }\r\n        })\r\n    });\r\n    return groups;\r\n\r\n}\r\n\r\n// https://stackoverflow.com/questions/16767301/calculate-difference-between-2-timestamps-using-javascript\r\n// Pour check les daaaates hehehe\r\n\r\n\r\n//SSSSIIII l'utilisateur partage sa position avec le groupe , ne pas l'envoyer\r\n// +++ ne pas envoyer les user si leur position est nulle\r\n\r\n\r\n// les infos d'un groupe en particulier (les pinpoints et les positions des utilisateurs du groupe\r\nrouter.get('/positions/:iduser/:idgroup', function (req, res) {\r\n    //vérifier si l'utilisateur est bien dans le groupe avant de faire le traitement\r\n    let iduser = parseInt(req.params.iduser, 10);\r\n    let idgroup = req.params.idgroup;\r\n//pour le groupe : renvoyer son nom, les pinpoints qui lui sont associés, les dessins,\r\n// les positions des gens SSI ils décident de la partager avec ce groupe\r\n    let requete = getGroupPinpoints(idgroup);\r\n    db.any(requete)\r\n        .then((result) => {\r\n            let JSONToReturn = {idgroup: idgroup, issharing: false, pinpoints: [], userpositions: [], trackings: []};\r\n            result.forEach(element => {\r\n\r\n                // CHECK SI LA DATE est supérieure de 1 jour de plus de la date de RDV. sinon ne\r\n                let currentTime = new Date();\r\n                let diff = currentTime - element.daterdv;// donne la diff en millisecondes\r\n                let dontPush = false;\r\n                if (diff > 8.64e+7) {// le nombre de millisecs en 1 jour hehe\r\n                    dontPush = true;\r\n                }\r\n                console.log(diff);\r\n                //pas renvoyer\r\n                let pinpoint = {\r\n                    idpinpoint: element.idpinpoint,\r\n                    idcreator: element.idcreator,\r\n                    nomcreator: element.nom,\r\n                    prenomcreator: element.prenom,\r\n                    pinlt: element.pinlt,\r\n                    pinlg: element.pinlg,\r\n                    description: element.description,\r\n                    daterdv: element.daterdv\r\n                };\r\n                //si la date est ok on le push dans l'array\r\n                if (!dontPush) {\r\n                    JSONToReturn.pinpoints.push(pinpoint);\r\n\r\n                }\r\n            });\r\n            db.any(getUsersPositions(idgroup))\r\n                .then((userpositions) => {\r\n\r\n                    let currentDate = new Date();\r\n                    let userCorrectRequest = false;\r\n                    userpositions.forEach(element => {\r\n\r\n                        if (parseInt(element.iduser, 10) === iduser) {\r\n                            userCorrectRequest = true; // on vérifie ici si le gars qui demande est bien dans le groupe\r\n                            JSONToReturn.issharing = element.sharesposition;\r\n\r\n\r\n                        }\r\n                        let isCurrent = false;\r\n                        if (element.dateposition !== null) {\r\n                            isCurrent = compareTimes(currentDate, element.dateposition);\r\n                        }\r\n\r\n\r\n                        let userposition = {\r\n                            iduser: element.iduser,\r\n                            prenom: element.prenom,\r\n                            nom: element.nom,\r\n                            userlt: element.userglt,\r\n                            userlg: element.userglg,\r\n                            msg: element.msg,\r\n                            current: isCurrent,\r\n                            dateposition: element.dateposition\r\n                        };\r\n                        if (element.dateposition !== null) {\r\n                            if (!(parseInt(element.iduser, 10) === iduser && element.sharesposition)) {\r\n                                JSONToReturn.userpositions.push(userposition);\r\n                            }\r\n                        }\r\n                    });\r\n                    //ici on build le tableau des tracking\r\n                    getTrackings(idgroup)\r\n                        .then((result) => {\r\n                            let tracking = buildTrackingArray(result);\r\n                            JSONToReturn.trackings = tracking;\r\n                            if (userCorrectRequest) {\r\n                                res.send({\r\n                                    status: 'success',\r\n                                    message: JSONToReturn\r\n                                });\r\n                            }\r\n                            else {\r\n                                res.status(400);\r\n                                res.send({\r\n                                    status: 'fail',\r\n                                    message: 'You requested the informations of a group in which you DON\\'T belong'\r\n                                })\r\n                            }\r\n                        })\r\n                        .catch(error => {\r\n                            res.status(400);\r\n                            res.send({\r\n                                status: 'fail',\r\n                                message: 'failed at getting trackings from group' + err.toString()\r\n                            })\r\n                            console.log('Failed at getting trackings from group ' + idgroup + error);\r\n                        });\r\n\r\n                })\r\n                .catch(err => {\r\n                    res.status(400);\r\n                    res.send({\r\n                        status: 'fail',\r\n                        message: err.toString()\r\n                    })\r\n                })\r\n        })\r\n        .catch(e => {\r\n            res.status(400);\r\n            res.send({\r\n                status: 'fail',\r\n                message: e.toString()\r\n            })\r\n        });\r\n\r\n\r\n});\r\nconst getTrackings = (idgroup) => {\r\n    return db.query(squel\r\n        .select()\r\n        .field('lt', 'lat')\r\n        .field('lg', 'lng')\r\n        .field('timepos')\r\n        .field('iduser')\r\n        .from('public.\"TRACK_POS\"')\r\n        .where('idgroup = ?', idgroup)\r\n        .order('iduser')\r\n        .order('timepos')\r\n        .toString())\r\n};\r\n\r\nfunction buildTrackingArray(array) {\r\n    let toReturn = [];\r\n    array.forEach(element => {\r\n        let containsIdUser = false;\r\n        let indexInReturn;\r\n        //  let objToPush = {iduser: , tracking:[]};\r\n        //Pour chaque element, si l'iduser existe deja ds le tableau on le push pas mais on push sa position dans son tableau\r\n        toReturn.forEach((newEl, index) => {\r\n            if (parseInt(newEl.iduser) === parseInt(element.iduser)) {\r\n                containsIdUser = true;\r\n                indexInReturn = index\r\n            }\r\n        });\r\n        if (containsIdUser) {\r\n            toReturn[indexInReturn].tracking.push({lt: element.lt, lg: element.lg});\r\n        }\r\n        else {\r\n            toReturn.push({iduser: parseInt(element.iduser), tracking: [{lt: element.lt, lg: element.lg}]})\r\n        }\r\n    });\r\n    return toReturn;\r\n}\r\n\r\n\r\nlet getGroupPinpoints = (idgroup) =>\r\n    squel.select()\r\n        .from('public.\"GROUP\"', 'gr')\r\n        .field('gr.nom', 'nomgroup')\r\n        .field('gr.idgroup')\r\n        .field('pin.idcreator')\r\n        .field('pin.idpinpoint')\r\n        .field('pin.pinlt')\r\n        .field('pin.pinlg')\r\n        .field('pin.description')\r\n        .field('pin.daterdv')\r\n        .field('usr.prenom')\r\n        .field('usr.nom')\r\n        .left_join('public.\"PINPOINT\"', 'pin', 'pin.idgroup = gr.idgroup')\r\n        .left_join('public.\"USER\"', 'usr', 'usr.iduser = pin.idcreator')\r\n        .where('gr.idgroup = ?', idgroup)\r\n        .toString();\r\n\r\nlet getUsersPositions = (idgroup) =>\r\n    squel.select()\r\n        .from('public.\"GROUP\"', 'gr')\r\n        .field('ugr.iduser')\r\n        .field('ugr.sharesposition')\r\n        .field('ugr.userglt')\r\n        .field('ugr.userglg')\r\n        .field('usr.msg')\r\n        .field(\"ugr.dateposition\")\r\n        .field('usr.nom')\r\n        .field('usr.prenom')\r\n        .left_join('public.\"USER_GROUP\"', 'ugr', 'ugr.idgroup = gr.idgroup')\r\n        .left_join('public.\"USER\"', 'usr', 'usr.iduser = ugr.iduser')\r\n        .where('gr.idgroup = ?', idgroup)\r\n        .toString();\r\n\r\n\r\n//Si la dernière position stockée est > 15min, l'utilisateur est considéré comme inactif\r\nfunction compareTimes(currentTime, lastLocationTime) {\r\n    let difference = currentTime - lastLocationTime;\r\n    let toReturn = false;\r\n    console.log(difference);\r\n    if (difference < 900000){\r\n        toReturn = true\r\n    }\r\n    return toReturn;\r\n}\r\n\r\nrouter.get('/drawings/:iduser/:idgroup', function (req, res) {\r\n    let iduser = req.params.iduser;\r\n    let idgroup = req.params.idgroup;\r\n    let query = getDrawings(idgroup);\r\n    let JSONToReturn = {\r\n        idgroup: idgroup,\r\n        drawings: []\r\n    };\r\n\r\n    db.any(query)\r\n        .then((result) => {\r\n            result.forEach(element => {\r\n                let objectToPush = {\r\n                        iddrawing: element.iddrawing,\r\n                        idcreator: element.idcreator,\r\n                        nomcreator: element.nom,\r\n                        prenomcreator: element.prenom,\r\n                        description: element.description,\r\n                        lt: element.lt,\r\n                        lg: element.lg,\r\n                        zoom: element.zoom,\r\n                        nelt: element.nelt,\r\n                        nelg: element.nelg,\r\n                        swlt: element.swlt,\r\n                        swlg: element.swlg,\r\n                        img: element.img\r\n                    }\r\n                ;\r\n                if (element.actif) {\r\n                    JSONToReturn.drawings.push(objectToPush);\r\n                }\r\n            });\r\n            res.send({\r\n                status: 'success',\r\n                message: JSONToReturn\r\n            });\r\n        })\r\n        .catch(e => {\r\n            console.log(e);\r\n            res.status(400);\r\n            res.send({\r\n                status: 'fail',\r\n                message: e.toString()\r\n            });\r\n        });\r\n\r\n});\r\n\r\n\r\nlet getDrawings = (idgroup) =>\r\n    squel.select()\r\n        .from('public.\"DRAWING\"', 'draw')\r\n        .field('draw.iddrawing')\r\n        .field('draw.idcreator')\r\n        .field('draw.actif')\r\n        .field(\"encode(draw.img, 'base64')\", 'img')\r\n        .field('draw.nelg')\r\n        .field('draw.nelt')\r\n        .field('draw.swlt')\r\n        .field('draw.swlg')\r\n        .field('draw.zoom')\r\n        .field('description')\r\n        .field('usr.nom')\r\n        .field('usr.prenom')\r\n        .left_join('public.\"USER\"', 'usr', 'usr.iduser = draw.idcreator')\r\n        .where('draw.idgroup = ?', idgroup)\r\n        .toString();\r\n\r\n//ca passe en post\r\nrouter.post('/creategroup', function (req, res) {\r\n\r\n    let toCreate = {\r\n        iduser: req.body.iduser,\r\n        groupname: req.body.groupname\r\n    };\r\n\r\n    let currentTime = new Date();\r\n    let query = squel.insert({replaceSingleQuotes: true, singleQuoteReplacement: `''`})\r\n        .into('public.\"GROUP\"')\r\n        .set('nom', toCreate.groupname)\r\n        .set('creationdate', currentTime.toISOString())\r\n        .returning('idgroup')\r\n        .toString();\r\n\r\n    db.one(query)\r\n        .then((row) => {\r\n            let inUserGroup = squel.insert()\r\n                .into('public.\"USER_GROUP\"', 'ugr')\r\n                .set('idgroup', row.idgroup)\r\n                .set('iduser', toCreate.iduser)\r\n                .set('iscreator', true)\r\n                .toString();\r\n            db.none(inUserGroup)\r\n                .then(() => {\r\n                    let response = {\r\n                        idgroup: row.idgroup\r\n                    };\r\n                    sender.sendResponse(sender.SUCCESS_STATUS, response, res)\r\n                })\r\n                .catch(err => {\r\n                    sender.sendResponse(sender.BAD_REQUEST, 'Failed to insert user in USER_GROUP', res);\r\n                    console.log(err);\r\n                })\r\n\r\n        })\r\n        .catch(e => {\r\n            sender.sendResponse(sender.BAD_REQUEST, 'Failed to create group', res);\r\n            console.log(e);\r\n        })\r\n});\r\n\r\nrouter.post('/changegroupname', function (req, res) {\r\n    let toChange = {\r\n        idgroup: req.body.idgroup,\r\n        groupname: req.body.newgroupname\r\n    };\r\n\r\n    let\r\n        query = squel.update({replaceSingleQuotes: true, singleQuoteReplacement: `''`})\r\n            .table('public.\"GROUP\"')\r\n            .set('nom', toChange.groupname)\r\n            .where('idgroup = ?', toChange.idgroup)\r\n            .toString();\r\n    db.none(query)\r\n        .then(() => {\r\n            let response = {status: 'success', message: 'groupname updated successfully'};\r\n            sender.sendResponse(sender.SUCCESS_STATUS, response, res)\r\n        })\r\n        .catch(e => {\r\n            sender.sendResponse(sender.BAD_REQUEST, {status: 'fail', message: 'Failed to update groupname'}, res);\r\n            console.log(e);\r\n        })\r\n\r\n});\r\n\r\nmodule.exports = router;\r\n"]}