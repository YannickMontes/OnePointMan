{"version":3,"sources":["../../routes/users.js"],"names":["express","require","router","Router","axios","db","squelb","squel","useFlavour","sender","facebookdata","get","req","res","next","send","userAccessToken","post","toUpdate","iduser","body","userlg","userlt","getGroups","select","from","field","where","parseInt","toString","any","then","groups","currentTime","Date","updateUserTable","update","table","set","toISOString","none","console","log","forEach","element","sharesposition","query","idgroup","catch","istracking","inTrack","insert","into","e","status","message","positionSharing","sendResponse","SUCCESS_STATUS","BAD_REQUEST","msg","replaceSingleQuotes","singleQuoteReplacement","params","one","toCreate","delete","query2","result","length","deleteLastUser","deleteGroup","err","error","user_id","userFriendList","friendlist","_getUserFriendList","response","data","userFriendListRequest","redirectURI","userID","module","exports"],"mappings":"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","file":"users.js","sourcesContent":["var express = require('express');\r\nvar router = express.Router();\r\nconst axios = require('axios');\r\n\r\nconst db = require('../connection');\r\nconst squelb = require('squel');\r\nconst squel = squelb.useFlavour('postgres');\r\n\r\nconst sender = require('../sender');\r\nconst facebookdata = require(\"../facebookdata\");\r\n\r\n/* GET users listing. */\r\nrouter.get('/', function (req, res, next) {\r\n    res.send('respond with a resource user id :' + facebookdata.userAccessToken);\r\n});\r\n\r\nrouter.post(('/updateposition'), function (req, res) {\r\n\r\n    let toUpdate = {\r\n        iduser: req.body.iduser,\r\n        userlg: req.body.userlg,\r\n        userlt: req.body.userlt,\r\n    };\r\n\r\n    let getGroups = squel.select()\r\n        .from('public.\"USER_GROUP\"', 'ugr')\r\n        .field('ugr.idgroup')\r\n        .field('ugr.sharesposition')\r\n        .field('ugr.istracking')\r\n        .where('ugr.iduser = ?', parseInt(toUpdate.iduser, 10))\r\n        .toString();\r\n    db.any(getGroups)\r\n        .then((groups) =>{\r\n            let currentTime = new Date();\r\n            let updateUserTable = squel.update()\r\n                .table('public.\"USER\"')\r\n                .set('lg', toUpdate.userlg)\r\n                .set('lt',toUpdate.userlt)\r\n                .set('dateposition', currentTime.toISOString())\r\n                .where('iduser = ?', toUpdate.iduser)\r\n                .toString();\r\n            db.none(updateUserTable)\r\n                .then(() => {\r\n                    console.log('Updated position of user in USER ');\r\n                    console.log(groups);\r\n                    groups.forEach(element => {\r\n                        //pour chaque groupe, s'il décide de partager sa position avec, on update sa position\r\n                        if (element.sharesposition === true) {\r\n                            let query = squel.update()\r\n                                .table('public.\"USER_GROUP\"')\r\n                                .set('userglt', toUpdate.userlt)\r\n                                .set('userglg', toUpdate.userlg)\r\n                                .set('dateposition', currentTime.toISOString())\r\n                                .where('iduser = ?', toUpdate.iduser)\r\n                                .toString();\r\n                            db.none(query)\r\n                                .then(() => {\r\n                                    console.log('Updated position of user in group ' + element.idgroup);\r\n                                })\r\n                                .catch(e => {\r\n\r\n                                    console.log('failed at updating position in group');\r\n                                })\r\n                        }\r\n                        if (element.istracking === true) {\r\n                            let inTrack = squel.insert()\r\n                                .into('public.\"TRACK_POS\"')\r\n                                .set('lt', toUpdate.userlt)\r\n                                .set('lg', toUpdate.userlg)\r\n                                .set('timepos', currentTime.toISOString())\r\n                                .set('iduser', toUpdate.iduser)\r\n                                .set('idgroup', element.idgroup)\r\n                                .toString();\r\n\r\n                            db.none(inTrack)\r\n                                .then(() => {\r\n                                    console.log('added position in tracking for group ' + element.idgroup);\r\n                                })\r\n                                .catch(e => {\r\n                                    console.log('failed at addinf position for tracking' + e);\r\n                                })\r\n                        }\r\n\r\n                })\r\n            });\r\n\r\n            res.send({\r\n                status: 'success',\r\n                message: 'Position updated successfully'\r\n            })\r\n        })\r\n        .catch(e => {\r\n            res.status(400);\r\n            res.send({\r\n                status: 'fail',\r\n                message: e.toString()\r\n            })\r\n        });\r\n});\r\n\r\nrouter.post(('/updatepositionsharing/'), function(req, res){\r\n\r\n    let toUpdate = {\r\n        iduser : req.body.iduser,\r\n        idgroup : req.body.idgroup,\r\n        positionSharing : req.body.positionSharing,\r\n    };\r\n\r\n    let query = squel.update()\r\n        .table('public.\"USER_GROUP\"')\r\n        .set('sharesposition', toUpdate.positionSharing)\r\n        .where('iduser = ?', toUpdate.iduser)\r\n        .where('idgroup = ?', toUpdate.idgroup)\r\n        .toString();\r\n\r\n    db.query(query)\r\n        .then(()=>{\r\n            sender.sendResponse(sender.SUCCESS_STATUS, {status:'success',message:'Position sharing updated successfully'}, res)\r\n        })\r\n        .catch(e => {\r\n            sender.sendResponse(sender.BAD_REQUEST, {status:'fail', message:'Error while updating position sharing'}, res);\r\n            console.log(e);\r\n        })\r\n});\r\n\r\nrouter.post('/updatemsg', function(req,res){\r\n   let toUpdate = {\r\n       iduser : req.body.iduser,\r\n       msg: req.body.msg\r\n   };\r\n   console.log(toUpdate);\r\n   let query = squel.update({replaceSingleQuotes: true, singleQuoteReplacement: `''`})\r\n       .table('public.\"USER\"')\r\n       .set('msg', toUpdate.msg)\r\n       .where('iduser = ?', toUpdate.iduser)\r\n       .toString();\r\nconsole.log(query);\r\n   db.none(query)\r\n       .then(()=>{\r\n           sender.sendResponse(sender.SUCCESS_STATUS, {status:'success',message:'message updated successfully successfully'}, res)\r\n       })\r\n       .catch(e=>{\r\n           sender.sendResponse(sender.BAD_REQUEST, {status:'fail',message:'Error while updating message'}, res);\r\n           console.log(e);\r\n       })\r\n   //UPDATE MESSAGE\r\n\r\n});\r\n\r\nrouter.get('/getmsg/:iduser', function(req,res){\r\n    let iduser = req.params.iduser;\r\n    let query= squel.select()\r\n        .from('public.\"USER\"')\r\n        .field('msg')\r\n        .where('iduser = ?', iduser)\r\n        .toString();\r\n\r\n    db.one(query)\r\n        .then((msg) => {\r\n            sender.sendResponse(sender.SUCCESS_STATUS, {status:'success',message:msg}, res)\r\n        })\r\n        .catch(e=>{\r\n            sender.sendResponse(sender.BAD_REQUEST, {status:'fail',message:'Error while getting message'}, res);\r\n            console.log(e);\r\n        })\r\n});\r\n\r\nrouter.post('/createuser/', function (req, res) {\r\n\r\n    let toCreate = {\r\n        iduser: req.body.iduser,\r\n        idgroup: req.body.idgroup,\r\n    };\r\n    let query = squel.insert()\r\n        .into('public.\"USER_GROUP\"')\r\n        .set('iduser', parseInt(toCreate.iduser))\r\n        .set('idgroup', parseInt(toCreate.idgroup))\r\n        .toString();\r\n\r\n    db.none(query)\r\n        .then(()=>{\r\n            sender.sendResponse(sender.SUCCESS_STATUS, {status:'success',message:'User ' + toCreate.iduser + ' added to group ' + toCreate.idgroup + ' successfully'}, res)\r\n        })\r\n        .catch(e => {\r\n            sender.sendResponse(sender.BAD_REQUEST, {status:'fail',message:'Error while adding user ' + toCreate.iduser + ' to group'}, res);\r\n            console.log(e);\r\n        })\r\n});\r\n\r\nrouter.post('/deleteuser/', function(req, res){\r\n    console.log(req.body);\r\n    let toUpdate = {\r\n        iduser : req.body.iduser,\r\n        idgroup : req.body.idgroup,\r\n    };\r\n// check si ya 1 personne dans le groupe\r\n    let query = squel.delete()\r\n        .from('public.\"USER_GROUP\"')\r\n        .where('iduser = ?', parseInt(toUpdate.iduser))\r\n        .where('idgroup = ?', parseInt(toUpdate.idgroup))\r\n        .toString();\r\n    db.query(query)\r\n        .then(()=>{\r\n        let query2 = squel.select()\r\n            .from('public.\"USER_GROUP\"')\r\n            .where('idgroup = ? ', parseInt(toUpdate.idgroup))\r\n            .toString();\r\n        db.any(query2)\r\n            .then((result)=>{\r\n                if(result.length === 1){\r\n                    //supprimer la derniere personne du groupe\r\n                    let deleteLastUser = squel.delete()\r\n                        .from('public.\"USER_GROUP\"')\r\n                        .where('idgroup = ?', parseInt(toUpdate.idgroup))\r\n                        .toString();\r\n                    db.query(deleteLastUser)\r\n                        .then(()=>{\r\n                            console.log('deleted last user from group successfully')\r\n                            let deleteGroup=squel.delete()\r\n                                .from('public.\"GROUP\"')\r\n                                .where('idgroup = ?', toUpdate.idgroup)\r\n                                .toString();\r\n                            db.query(deleteGroup)\r\n                                .then(()=>{\r\n                                    console.log(\"group deleted bc no more users\");\r\n                                })\r\n                                .catch(err=>{\r\n                                    console.log(\"failed at deleting empty group\" + err);\r\n                                })\r\n                        })\r\n                        .catch(error=>{\r\n                            console.log('failed at deleting last user' + error)\r\n                        });\r\n                }\r\n            })\r\n            .catch(e=>{\r\n                console.log('Failed at deleting group' + e)\r\n            });\r\n            sender.sendResponse(sender.SUCCESS_STATUS, {status:'success',message:'User deleted from group successfully'}, res)\r\n        })\r\n        .catch(e => {\r\n            sender.sendResponse(sender.BAD_REQUEST, {status:'success',message:'Error while deleting user from group'}, res);\r\n            console.log(e);\r\n        })\r\n});\r\n\r\nrouter.get('/userFriends/:user_id/', function (req, res) {\r\n    console.log(\"GET /userFriends/:user_id/\");\r\n\r\n    let user_id = req.params.user_id;\r\n    let userFriendList = {\r\n        friendlist : []\r\n    };\r\n\r\n    _getUserFriendList(user_id)\r\n        .then(response => {\r\n            userFriendList.friendlist = response.data.data;\r\n\r\n            console.log('userAccessToken : ' + facebookdata.userAccessToken);\r\n            \r\n            console.log('userFriendList : ' + userFriendList);\r\n\r\n            sender.sendResponse(sender.SUCCESS_STATUS, userFriendList, res)\r\n        })\r\n        .catch(error => {\r\n        console.log(error)\r\n    });\r\n});\r\n\r\nconst _getUserFriendList = (user_id) => {\r\n    let userFriendListRequest = {\r\n        redirectURI: 'https://graph.facebook.com/v2.11/',\r\n        userAccessToken: facebookdata.userAccessToken,\r\n        userID: user_id\r\n    };\r\n\r\n    return axios.get(userFriendListRequest.redirectURI + userFriendListRequest.userID + '/friends?access_token=' + userFriendListRequest.userAccessToken)\r\n};\r\n\r\nmodule.exports = router;\r\n"]}